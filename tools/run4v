#! /usr/bin/env python
import sys
import run4v
import argparse

parser = argparse.ArgumentParser(description="A command line interface for run4v")


parser.add_argument("--version", help="Print program version", action="store_true")
parser.add_argument("-v", "--verbose", help="Make the output verbose", action="store_true")


subparsers = parser.add_subparsers(help="For further information for every command, type in 'run4v <command> -h'", metavar="command", dest="command")

#########
#  RUN  #
#########

run_parser = subparsers.add_parser("run", help="Command line runner: You can run individual jobs from an input 'run4v' file. ")
run_parser.add_argument("-f","--file", help="Input file where jobs are defined, default is 'runner.py'", action="store", default="runner.py")
run_parser.add_argument("-r", "--runner", help="The name of the runner variable in the input file.")
run_parser.add_argument("-j", "--job", help="The name of the job variable in the input file that is to be run. It supports multiple job variables.", nargs="+", action="store")
run_parser.add_argument("-c", "--run-command", help="Command that should be called to run the job.", action="store")
run_parser.add_argument("-o", "--output-folder", help="Folder of the job (only in conjunction with job flag)", action="store")
run_parser.add_argument("--set-incar", help="Pass in an INCAR file in json format.", action="store")
run_parser.add_argument("--update-incar", help="Pass in INCAR parameters in json format to update the already defined INCAR file.", action="store")
run_parser.add_argument("-x", "--execute-code", help="Pass in python code to be evaluated after the reading in of the runner file.", action="store")

##########
#  KILL  #
##########

kill_parser = subparsers.add_parser("kill", help="Kill process in the directory where it was created. It simply reads the automatically generated file '.run4v_pid_<pid>' file and kills the process... ")


###########
#  CLEAN  #
###########

clean_parser = subparsers.add_parser("clean", help="Clean automatically generated files such as '.run4v_pid_<pid>'")



args = parser.parse_args()



print(run4v.LOGO)


if args.version:
    print(run4v.__version__)

if args.verbose:
    print("Making the output verbose...")
    run4v.VERBOSE=True
else:
    run4v.VERBOSE=False

run4v.vprint("ARGS: %s"%args)

#########
#  RUN  #
#########

if args.command=="run":
    run4v.vprint("Importing file %s..."%args.file)
    readModule = open(args.file, "r").read()
    exec(readModule)
    run4v.vprint("File imported!")
    run4v.vprint("Reading job '%s'!"%(args.job))
    jobs = []
    for job in args.job:
        jobs.append(eval(job))
        try:
            run4v.vprint("Parsing job variable: %s"%job)
        except:
            print("ERROR: the variable %s was not found in %s"%(job, args.file))
            sys.exit(-1)
    for job in jobs:
        if args.run_command:
            run4v.vprint("Setting command for job %s to %s"%(job, args.run_command))
            job.setCommand(args.run_command)
        if args.output_folder:
            run4v.vprint("Setting %s's folder equal to %s"%(job, args.output_folder))
            job.setFolder(args.output_folder)
        if args.set_incar:
            import json
            incar_settings = json.loads(args.set_incar)
            job.setIncar(incar_settings)
        if args.update_incar:
            import json
            incar_settings = json.loads(args.update_incar)
            job.updateIncar(incar_settings)
        if args.execute_code:
            exec(args.execute_code)
        run4v.vprint("Running job %s..."%job)
        job.run()
##########
#  kill  #
##########
elif args.command=="kill":
    run4v.kill()
##########
#  clean  #
##########
elif args.command=="clean":
    run4v.clean()





