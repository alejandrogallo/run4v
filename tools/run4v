#! /usr/bin/env python
import sys

import run4v
import argparse

parser = argparse.ArgumentParser(description="A command line interface for run4v")


parser.add_argument("-v", "--verbose", help="Make the output verbose", action="store_true")


subparsers = parser.add_subparsers(help="For further information for every command, type in 'run4v <command> -h'", metavar="command", dest="command")

# RUNNER OPTIONS
run_parser = subparsers.add_parser("run", help="Command line runner: You can run individual jobs from an input 'run4v' file. ")
run_parser.add_argument("-f","--file", help="Input file where jobs are defined, default is 'runner.py'", action="store", default="runner.py")
#run_parser.add_argument("-r", "--runner", help="The name of the runner variable in the input file. Default value is 'runner'", default="runner")
run_parser.add_argument("-j", "--job", help="The name of the job variable in the input file that is to be run.", action="store")
run_parser.add_argument("-c", "--command", help="Command that should be called to run the job.", action="store")

#KILL OPTIONS
kill_parser = subparsers.add_parser("kill", help="Kill process in the directory where it was created. It simply reads the automatically generated file '.run4v_pid_<pid>' file and kills the process... ")


#CLEAN OPTIONS
clean_parser = subparsers.add_parser("clean", help="Clean automatically generated files such as '.run4v_pid_<pid>'")



args = parser.parse_args()



print(run4v.LOGO)



if args.verbose:
    print("Making the output verbose...")
    run4v.VERBOSE=True
else:
    run4v.VERBOSE=False


if args.command=="run":
    run4v.vprint("Importing file %s..."%args.file)
    readModule = open(args.file, "r").read()
    exec(readModule)
    run4v.vprint("File imported!")
    run4v.vprint("Reading job '%s'!"%(args.job))
    try:
        run4v.vprint("Parsing job variable...")
        job = eval(args.job)
    except:
        print("ERROR: the variable %s was not found in %s"%(args.job, args.file))
        sys.exit(-1)
    else:
        if args.command:
            run4v.vprint("Setting command for job %s to %s"%(job, args.command))
            job.setCommand(args.command)
        run4v.vprint("Running job %s..."%job)
        job.run()
elif args.command=="kill":
    run4v.kill()
elif args.command=="clean":
    run4v.clean()





